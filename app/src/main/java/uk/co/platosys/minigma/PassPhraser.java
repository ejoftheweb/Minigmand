package uk.co.platosys.minigma;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

import uk.co.platosys.effwords.Effwords;
import uk.co.platosys.minigma.exceptions.Exceptions;

/**Class to generate random-word passphrases.
 *
 * In  Minigma, a Key needs a passphrase, which is a char array.
 *
 *      PassPhraser generates random-word passphrases. There is some evidence that random-word
 *      passphrases are easier to remember for a similar level of entropy than random-character ones,
 *      even though the resulting passphrase is much longer.
 *
 *      Random passphrases are known to be more secure than human-generated ones.
 *
 *      You can specify alternative wordlists supported by Effwords. At the moment, Effwords only
 *      supports the three EFF lists which are English words. It would be good to support other languages
 *      though.
 *
 *  */
public class PassPhraser {

    private  File wordListFile;
    private List<String> wordList;
    public static final String WORDSEPARATOR = " ";
    public static final char WORDSEPARATOR_CHAR=' ';
    public static int LONGWORDLIST=Effwords.EFF_LONGLIST;
    public static int SHORTWORDLIST=Effwords.EFF_SHORTLIST;
    public static int ALTWORDLIST=Effwords.EFF_DEFAULTLIST;


    /**
     * Returns a random word passphrase of length words from the default
     * word list, using a SecureRandom instance for entropy.
     * @param words
     * @return
     */
    public static char[] getPassPhrase(int words) {
        return getPassPhrase(LONGWORDLIST, words);
    }
    /**
     * Returns a random word passphrase of length words from the given
     * wordlist, using a SecureRandom instance for entropy.
     * @param words
     * @return
     */
    public static char[] getPassPhrase(int wordList, int words) {
        SecureRandom secureRandom = new SecureRandom();
        StringBuffer buffer= new StringBuffer();
        for (int i = 0; i < words; i++) {
            try {
                int word = secureRandom.nextInt();
                if (i > 0) {
                    buffer.append(WORDSEPARATOR);
                }
                buffer.append(Effwords.getWord(wordList,word));
            }catch (Exception x) {
                Exceptions.dump(x);
            }
        }
        return buffer.toString().toCharArray();
    }

    /**
     * converts a char array to an array of strings.
     * @param passphrase
     * @return
     */
    public static  List<String> toWordList(char[] passphrase) {
        ArrayList<String> words = new ArrayList<>();
        StringBuffer stringBuffer = new StringBuffer();
        for (char ch : passphrase) {
            if (ch != WORDSEPARATOR_CHAR) {
                stringBuffer.append(ch);
            } else {
                String word = stringBuffer.toString();
                words.add(word);
                stringBuffer = new StringBuffer();
            }
        }
        if (stringBuffer != null) {
            words.add(stringBuffer.toString());
        }
        return words;
    }

    /**
     * returns a word from the given wordlist, where word is a random integer
     * such as one generated by the user throwing dice.
     * @param wordlist the Effwords wordlist selected.
     * @param word a random integer
     * @return
     */
    public static String getWord(int wordlist, int word){
        try {
            return Effwords.getWord(wordlist, word);
        }catch(Exception x){
            Exceptions.dump(x);
            return null;
        }
    }

}

